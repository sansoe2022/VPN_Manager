#!/bin/bash
#====================================================
#	@kiritosshxd - Ubuntu 22.04 Compatible Version
#====================================================
cor1='\033[41;1;37m'
cor2='\033[44;1;37m'
scor='\033[0m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
SCOLOR='\033[0m'

# Ubuntu 22.04 version check
check_ubuntu_version() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        if [[ "$VERSION_ID" == "22.04" ]] || [[ "$VERSION_ID" > "20" ]]; then
            return 0
        fi
    fi
    return 0
}

[[ $(awk -F" " '{print $2}' /usr/lib/licence 2>/dev/null) == "@KIRITO_SSH" ]] && {
	ram1=$(free -h | grep -i mem | awk {'print $2'})
	ram2=$(free -h | grep -i mem | awk {'print $4'})
	ram3=$(free -h | grep -i mem | awk {'print $3'})
	uso=$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')
	system=$(cat /etc/issue.net)
	
	fun_bar() {
		comando[0]="$1"
		comando[1]="$2"
		(
			[[ -e $HOME/fim ]] && rm $HOME/fim
			[[ ! -d /etc/SSHPlus ]] && rm -rf /bin/menu
			${comando[0]} >/dev/null 2>&1
			${comando[1]} >/dev/null 2>&1
			touch $HOME/fim
		) >/dev/null 2>&1 &
		tput civis
		echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
		while true; do
			for ((i = 0; i < 18; i++)); do
				echo -ne "\033[1;31m#"
				sleep 0.1s
			done
			[[ -e $HOME/fim ]] && rm $HOME/fim && break
			echo -e "\033[1;33m]"
			sleep 1s
			tput cuu1
			tput dl1
			echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
		done
		echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
		tput cnorm
	}

	verif_ptrs() {
		porta=$1
		PT=$(ss -tlpn 2>/dev/null | grep -v "LISTEN" | grep -v "State")
		[[ -z "$PT" ]] && PT=$(lsof -V -i tcp -P -n 2>/dev/null | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN")
		for pton in $(echo -e "$PT" | awk '{print $5}' | cut -d: -f2 | sort -u); do
			svcs=$(echo -e "$PT" | grep ":$pton" | awk '{print $1}' | sort -u)
			[[ "$porta" = "$pton" ]] && {
				echo -e "\n\033[1;31mPORTA \033[1;33m$porta \033[1;31mEM USO PELO \033[1;37m$svcs\033[0m"
				sleep 3
				fun_conexao
			}
		done
	}

	fun_openvpn() {
		if readlink /proc/$$/exe | grep -qs "dash"; then
			echo "Este script precisa ser executado com bash, não sh"
			exit 1
		fi
		[[ "$EUID" -ne 0 ]] && {
			clear
			echo "Execute como root"
			exit 2
		}
		[[ ! -e /dev/net/tun ]] && {
			echo -e "\033[1;31mTUN TAP NAO DISPONIVEL\033[0m"
			sleep 2
			exit 3
		fi
		
		# Detect OS
		if [[ -e /etc/debian_version ]]; then
			OS=debian
			GROUPNAME=nogroup
			RCLOCAL='/etc/rc.local'
		elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
			OS=centos
			GROUPNAME=nobody
			RCLOCAL='/etc/rc.d/rc.local'
		else
			echo -e "SISTEMA NAO SUPORTADO"
			exit 5
		fi
		
		newclient() {
			# Generate client.ovpn
			cp /etc/openvpn/server/client-common.txt ~/$1.ovpn
			echo "<ca>" >>~/$1.ovpn
			cat /etc/openvpn/server/easy-rsa/pki/ca.crt >>~/$1.ovpn
			echo "</ca>" >>~/$1.ovpn
			echo "<cert>" >>~/$1.ovpn
			sed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/server/easy-rsa/pki/issued/$1.crt >>~/$1.ovpn
			echo "</cert>" >>~/$1.ovpn
			echo "<key>" >>~/$1.ovpn
			cat /etc/openvpn/server/easy-rsa/pki/private/$1.key >>~/$1.ovpn
			echo "</key>" >>~/$1.ovpn
			echo "<tls-auth>" >>~/$1.ovpn
			cat /etc/openvpn/server/ta.key >>~/$1.ovpn
			echo "</tls-auth>" >>~/$1.ovpn
		}
		
		IP1=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
		IP2=$(wget -4qO- "http://whatismyip.akamai.com/" 2>/dev/null)
		[[ "$IP1" = "" ]] && {
			IP1=$(hostname -I | cut -d' ' -f1)
		}
		[[ "$IP1" != "$IP2" ]] && {
			IP="$IP1"
		} || {
			IP="$IP2"
		}
		
		[[ $(systemctl is-active openvpn-server@server 2>/dev/null) == "active" ]] && {
			while :; do
				clear
				opnp=$(grep "^port" /etc/openvpn/server/server.conf 2>/dev/null | awk '{print $2}')
				[[ -z "$opnp" ]] && opnp="1194"
				
				[[ -d /var/www/html/openvpn ]] && {
					ovpnweb=$(echo -e "\033[1;32m◉ ")
				} || {
					ovpnweb=$(echo -e "\033[1;31m○ ")
				}
				if grep -q "duplicate-cn" /etc/openvpn/server/server.conf 2>/dev/null; then
					mult=$(echo -e "\033[1;32m◉ ")
				else
					mult=$(echo -e "\033[1;31m○ ")
				fi
				
				echo -e "\E[44;1;37m          GERENCIAR OPENVPN           \E[0m"
				echo ""
				echo -e "\033[1;33mPORTA\033[1;37m: \033[1;32m$opnp"
				echo ""
				echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33mALTERAR PORTA"
				echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mREMOVER OPENVPN"
				echo -e "\033[1;31m[\033[1;36m3\033[1;31m] \033[1;37m• \033[1;33mOVPN VIA LINK $ovpnweb"
				echo -e "\033[1;31m[\033[1;36m4\033[1;31m] \033[1;37m• \033[1;33mMULTILOGIN OVPN $mult"
				echo -e "\033[1;31m[\033[1;36m5\033[1;31m] \033[1;37m• \033[1;33mALTERAR HOST DNS"
				echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;37m• \033[1;33mVOLTAR"
				echo ""
				echo -ne "\033[1;32mOQUE DESEJA FAZER \033[1;33m?\033[1;31m?\033[1;37m "
				read option
				case $option in
				1)
					clear
					echo -e "\E[44;1;37m         ALTERAR PORTA OPENVPN         \E[0m"
					echo ""
					echo -e "\033[1;33mPORTA EM USO: \033[1;32m$opnp"
					echo ""
					echo -ne "\033[1;32mQUAL PORTA DESEJA UTILIZAR \033[1;33m?\033[1;37m "
					read porta
					[[ -z "$porta" ]] && {
						echo ""
						echo -e "\033[1;31mPorta invalida!"
						sleep 3
						fun_conexao
					}
					verif_ptrs $porta
					echo ""
					echo -e "\033[1;32mALTERANDO A PORTA OPENVPN!\033[1;33m"
					echo ""
					fun_opn() {
						sed -i "s/^port .*/port $porta/" /etc/openvpn/server/server.conf
						sleep 1
						var_ptovpn2=$(sed -n '7 p' /etc/openvpn/server/client-common.txt 2>/dev/null | awk '{print $NF}')
						sed -i "s/\b$var_ptovpn2\b/$porta/g" /etc/openvpn/server/client-common.txt
						sleep 1
						systemctl restart openvpn-server@server
					}
					fun_bar 'fun_opn'
					echo ""
					echo -e "\033[1;32mPORTA ALTERADA COM SUCESSO!\033[1;33m"
					sleep 2
					fun_conexao
					;;
				2)
					echo ""
					echo -ne "\033[1;32mDESEJA REMOVER O OPENVPN \033[1;31m? \033[1;33m[s/n]:\033[1;37m "
					read REMOVE
					[[ "$REMOVE" = 's' ]] && {
						rmv_open() {
							PORT=$(grep '^port ' /etc/openvpn/server/server.conf 2>/dev/null | cut -d " " -f 2)
							PROTOCOL=$(grep '^proto ' /etc/openvpn/server/server.conf 2>/dev/null | cut -d " " -f 2)
							
							# Stop service
							systemctl stop openvpn-server@server
							systemctl disable openvpn-server@server
							
							# Remove iptables rules
							if iptables -L -n | grep -qE 'REJECT|DROP|ACCEPT'; then
								iptables -D INPUT -p $PROTOCOL --dport $PORT -j ACCEPT 2>/dev/null
								iptables -D FORWARD -s 10.8.0.0/24 -j ACCEPT 2>/dev/null
								iptables -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT 2>/dev/null
								iptables -t nat -D POSTROUTING -s 10.8.0.0/24 -j SNAT --to $IP 2>/dev/null
							fi
							
							# Save iptables
							if command -v netfilter-persistent &> /dev/null; then
								netfilter-persistent save
							elif command -v iptables-save &> /dev/null; then
								iptables-save > /etc/iptables/rules.v4 2>/dev/null
							fi
							
							# Remove packages
							apt-get remove --purge -y openvpn
							apt-get autoremove -y
							
							# Remove files
							rm -rf /etc/openvpn
							rm -rf /usr/share/doc/openvpn*
						}
						echo ""
						echo -e "\033[1;32mREMOVENDO O OPENVPN!\033[0m"
						echo ""
						fun_bar 'rmv_open'
						echo ""
						echo -e "\033[1;32mOPENVPN REMOVIDO COM SUCESSO!\033[0m"
						sleep 2
						fun_conexao
					} || {
						echo ""
						echo -e "\033[1;31mRetornando...\033[0m"
						sleep 2
						fun_conexao
					}
					;;
				3)
					[[ -d /var/www/html/openvpn ]] && {
						clear
						fun_spcr() {
							systemctl stop apache2 2>/dev/null
							apt-get remove apache2 -y
							apt-get autoremove -y
							rm -rf /var/www/html/openvpn
						}
						function aguarde() {
							helice() {
								fun_spcr >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo -ne "\033[1;31mDESATIVANDO\033[1;32m.\033[1;33m.\033[1;31m. \033[1;33m"
							helice
							echo -e "\e[1DOk"
						}
						aguarde
						sleep 2
						fun_openvpn
					} || {
						clear
						fun_apchon() {
							apt-get install apache2 zip -y
							sed -i "s/Listen 80/Listen 81/g" /etc/apache2/ports.conf
							systemctl restart apache2
							[[ ! -d /var/www/html ]] && mkdir -p /var/www/html
							[[ ! -d /var/www/html/openvpn ]] && mkdir /var/www/html/openvpn
							touch /var/www/html/openvpn/index.html
							chmod -R 755 /var/www
							systemctl enable apache2
							systemctl restart apache2
						}
						function aguarde2() {
							helice() {
								fun_apchon >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo -ne "\033[1;32mATIVANDO\033[1;32m.\033[1;33m.\033[1;31m. \033[1;33m"
							helice
							echo -e "\e[1DOk"
						}
						aguarde2
						fun_openvpn
					}
					;;
				4)
					if grep -q "duplicate-cn" /etc/openvpn/server/server.conf 2>/dev/null; then
						clear
						fun_multon() {
							sed -i '/duplicate-cn/d' /etc/openvpn/server/server.conf
							sleep 1.5s
							systemctl restart openvpn-server@server
							sleep 2
						}
						fun_spinmult() {
							helice() {
								fun_multon >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo ""
							echo -ne "\033[1;31mBLOQUEANDO MULTILOGIN\033[1;32m.\033[1;33m.\033[1;31m. \033[1;33m"
							helice
							echo -e "\e[1DOk"
						}
						fun_spinmult
						sleep 1
						fun_openvpn
					else
						clear
						fun_multoff() {
							grep -v "^duplicate-cn" /etc/openvpn/server/server.conf > /tmp/tmpass && mv /tmp/tmpass /etc/openvpn/server/server.conf
							echo "duplicate-cn" >> /etc/openvpn/server/server.conf
							sleep 1.5s
							systemctl restart openvpn-server@server
						}
						fun_spinmult2() {
							helice() {
								fun_multoff >/dev/null 2>&1 &
								tput civis
								while [ -d /proc/$! ]; do
									for i in / - \\ \|; do
										sleep .1
										echo -ne "\e[1D$i"
									done
								done
								tput cnorm
							}
							echo ""
							echo -ne "\033[1;32mPERMITINDO MULTILOGIN\033[1;32m.\033[1;33m.\033[1;31m. \033[1;33m"
							helice
							echo -e "\e[1DOk"
						}
						fun_spinmult2
						sleep 1
						fun_openvpn
					fi
					;;
				5)
					clear
					echo -e "\E[44;1;37m         ALTERAR HOST DNS           \E[0m"
					echo ""
					echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;37m• \033[1;33mADICIONAR HOST DNS"
					echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;37m• \033[1;33mREMOVER HOST DNS"
					echo -e "\033[1;31m[\033[1;36m3\033[1;31m] \033[1;37m• \033[1;33mEDITAR MANUALMENTE"
					echo -e "\033[1;31m[\033[1;36m0\033[1;31m] \033[1;37m• \033[1;33mVOLTAR"
					echo ""
					echo -ne "\033[1;32mOQUE DESEJA FAZER \033[1;33m?\033[1;31m?\033[1;37m "
					read resp
					[[ -z "$resp" ]] && {
						echo ""
						echo -e "\033[1;31mOpcao invalida!"
						sleep 3
						fun_openvpn
					}
					if [[ "$resp" = '1' ]]; then
						clear
						echo -e "\E[44;1;37m            Adicionar Host DNS            \E[0m"
						echo ""
						echo -e "\033[1;33mLista dos hosts atuais:\033[0m "
						echo ""
						for _host in $(grep -w "127.0.0.1" /etc/hosts | grep -v "localhost" | awk '{print $2}'); do
							echo -e "\033[1;32m$_host"
						done
						echo ""
						echo -ne "\033[1;33mDigite o host a ser adicionado\033[1;37m : "
						read host
						if [[ -z $host ]]; then
							echo ""
							echo -e "\E[41;1;37m        Campo Vazio ou invalido !       \E[0m"
							sleep 2
							fun_openvpn
						fi
						if grep -qw "$host" /etc/hosts; then
							echo -e "\E[41;1;37m    Esse host ja está adicionado  !    \E[0m"
							sleep 2
							fun_openvpn
						fi
						sed -i "3i\127.0.0.1 $host" /etc/hosts
						echo ""
						echo -e "\E[44;1;37m      Host adicionado com sucesso !      \E[0m"
						sleep 2
						fun_openvpn
					elif [[ "$resp" = '2' ]]; then
						clear
						echo -e "\E[44;1;37m            Remover Host DNS            \E[0m"
						echo ""
						echo -e "\033[1;33mLista dos hosts atuais:\033[0m "
						echo ""
						i=0
						oP=""
						for _host in $(grep -w "127.0.0.1" /etc/hosts | grep -v "localhost" | awk '{print $2}'); do
							i=$((i + 1))
							[[ $i -lt 10 ]] && i="0$i"
							oP+="$i:$_host\n"
							echo -e "\033[1;33m[\033[1;31m$i\033[1;33m] \033[1;37m- \033[1;32m$_host\033[0m"
						done
						echo ""
						echo -ne "\033[1;32mSelecione o host a ser removido \033[1;33m[\033[1;37m1\033[1;31m-\033[1;37m$i\033[1;33m]\033[1;37m: "
						read option
						if [[ -z $option ]]; then
							echo ""
							echo -e "\E[41;1;37m          Opcao invalida  !        \E[0m"
							sleep 2
							fun_openvpn
						fi
						host=$(echo -e "$oP" | grep -E "\b$option\b" | cut -d: -f2)
						grep -v "127.0.0.1 $host" /etc/hosts > /tmp/hosts_temp && mv /tmp/hosts_temp /etc/hosts
						echo ""
						echo -e "\E[41;1;37m      Host removido com sucesso !      \E[0m"
						sleep 2
						fun_openvpn
					elif [[ "$resp" = '3' ]]; then
						echo -e "\n\033[1;32mALTERANDO ARQUIVO \033[1;37m/etc/hosts\033[0m"
						echo -e "\n\033[1;31mATENCAO!\033[0m"
						echo -e "\n\033[1;33mPARA SALVAR USE AS TECLAS \033[1;32mctrl x y\033[0m"
						sleep 4
						clear
						nano /etc/hosts
						echo -e "\n\033[1;32mALTERADO COM SUCESSO!\033[0m"
						sleep 3
						fun_openvpn
					elif [[ "$resp" = '0' ]]; then
						echo ""
						echo -e "\033[1;31mRetornando...\033[0m"
						sleep 2
						fun_conexao
					else
						echo ""
						echo -e "\033[1;31mOpcao invalida !\033[0m"
						sleep 2
						fun_openvpn
					fi
					;;
				0)
					fun_conexao
					;;
				*)
					echo ""
					echo -e "\033[1;31mOpcao invalida !\033[0m"
					sleep 2
					fun_openvpn
					;;
				esac
			done
		} || {
			clear
			echo -e "\E[44;1;37m              INSTALADOR OPENVPN               \E[0m"
			echo ""
			echo -e "\033[1;33mRESPONDA AS QUESTOES PARA INICIAR A INSTALACAO"
			echo ""
			echo -ne "\033[1;32mPARA CONTINUAR CONFIRME SEU IP: \033[1;37m"
			read -e -i $IP IP
			[[ -z "$IP" ]] && {
				echo ""
				echo -e "\033[1;31mIP invalido!"
				sleep 3
				fun_conexao
			}
			echo ""
			read -p "$(echo -e "\033[1;32mQUAL PORTA DESEJA UTILIZAR? \033[1;37m")" -e -i 1194 porta
			[[ -z "$porta" ]] && {
				echo ""
				echo -e "\033[1;31mPorta invalida!"
				sleep 2
				fun_conexao
			}
			echo ""
			echo -e "\033[1;33mVERIFICANDO PORTA..."
			verif_ptrs $porta
			echo ""
			echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;33mSistema"
			echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;33mGoogle (\033[1;32mRecomendado\033[1;33m)"
			echo -e "\033[1;31m[\033[1;36m3\033[1;31m] \033[1;33mOpenDNS"
			echo -e "\033[1;31m[\033[1;36m4\033[1;31m] \033[1;33mCloudflare"
			echo -e "\033[1;31m[\033[1;36m5\033[1;31m] \033[1;33mQuad9"
			echo -e "\033[1;31m[\033[1;36m6\033[1;31m] \033[1;33mAdGuard DNS\033[0m"
			echo ""
			read -p "$(echo -e "\033[1;32mQUAL DNS DESEJA UTILIZAR? \033[1;37m")" -e -i 2 DNS
			echo ""
			echo -e "\033[1;31m[\033[1;36m1\033[1;31m] \033[1;33mUDP"
			echo -e "\033[1;31m[\033[1;36m2\033[1;31m] \033[1;33mTCP (\033[1;32mRecomendado\033[1;33m)"
			echo ""
			read -p "$(echo -e "\033[1;32mQUAL PROTOCOLO DESEJA UTILIZAR NO OPENVPN? \033[1;37m")" -e -i 2 resp
			if [[ "$resp" = '1' ]]; then
				PROTOCOL=udp
			elif [[ "$resp" = '2' ]]; then
				PROTOCOL=tcp
			else
				PROTOCOL=tcp
			fi
			
			echo ""
			echo -e "\033[1;32mATUALIZANDO O SISTEMA"
			echo ""
			fun_attos() {
				apt-get update -y
			}
			fun_bar 'fun_attos'
			
			echo ""
			echo -e "\033[1;32mINSTALANDO DEPENDENCIAS"
			echo ""
			fun_instdep() {
				apt-get install -y openvpn iptables openssl ca-certificates curl
				apt-get install -y easy-rsa
				# Install netfilter-persistent for Ubuntu 22
				apt-get install -y iptables-persistent netfilter-persistent
			}
			fun_bar 'fun_instdep'
			
			# Setup directories
			mkdir -p /etc/openvpn/server/easy-rsa/
			
			# Get Easy-RSA
			echo ""
			fun_dep() {
				# Use Easy-RSA from package or download newer version
				if [[ -d /usr/share/easy-rsa ]]; then
					ln -s /usr/share/easy-rsa/* /etc/openvpn/server/easy-rsa/
				else
					wget -O ~/EasyRSA.tgz "https://github.com/OpenVPN/easy-rsa/releases/download/v3.1.7/EasyRSA-3.1.7.tgz"
					tar xzf ~/EasyRSA.tgz -C ~/
					mv ~/EasyRSA-3.1.7/* /etc/openvpn/server/easy-rsa/
					rm -rf ~/EasyRSA.tgz ~/EasyRSA-3.1.7
				fi
				
				cd /etc/openvpn/server/easy-rsa/
				./easyrsa --batch init-pki
				./easyrsa --batch build-ca nopass
				./easyrsa --batch gen-dh
				./easyrsa --batch build-server-full server nopass
				./easyrsa --batch build-client-full SSHPLUS nopass
				EASYRSA_CRL_DAYS=3650 ./easyrsa --batch gen-crl
				
				# Copy files
				cp pki/ca.crt pki/private/ca.key pki/dh.pem pki/issued/server.crt pki/private/server.key pki/crl.pem /etc/openvpn/server/
				chown nobody:$GROUPNAME /etc/openvpn/server/crl.pem
				chmod 644 /etc/openvpn/server/crl.pem
				
				# Generate TLS auth key
				openvpn --genkey secret /etc/openvpn/server/ta.key
				
				# Generate server.conf
				echo "port $porta
proto $PROTOCOL
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
auth SHA512
tls-crypt ta.key
topology subnet
server 10.8.0.0 255.255.255.0" > /etc/openvpn/server/server.conf
				
				echo 'push "redirect-gateway def1 bypass-dhcp"' >> /etc/openvpn/server/server.conf
				
				# DNS
				case $DNS in
				1)
					grep -v '^#\|^;' /etc/resolv.conf | grep 'nameserver' | grep -oE '[0-9]{1,3}(\.[0-9]{1,3}){3}' | while read line; do
						echo "push \"dhcp-option DNS $line\"" >> /etc/openvpn/server/server.conf
					done
					;;
				2)
					echo 'push "dhcp-option DNS 8.8.8.8"' >> /etc/openvpn/server/server.conf
					echo 'push "dhcp-option DNS 8.8.4.4"' >> /etc/openvpn/server/server.conf
					;;
				3)
					echo 'push "dhcp-option DNS 208.67.222.222"' >> /etc/openvpn/server/server.conf
					echo 'push "dhcp-option DNS 208.67.220.220"' >> /etc/openvpn/server/server.conf
					;;
				4)
					echo 'push "dhcp-option DNS 1.1.1.1"' >> /etc/openvpn/server/server.conf
					echo 'push "dhcp-option DNS 1.0.0.1"' >> /etc/openvpn/server/server.conf
					;;
				5)
					echo 'push "dhcp-option DNS 9.9.9.9"' >> /etc/openvpn/server/server.conf
					echo 'push "dhcp-option DNS 149.112.112.112"' >> /etc/openvpn/server/server.conf
					;;
				6)
					echo 'push "dhcp-option DNS 94.140.14.14"' >> /etc/openvpn/server/server.conf
					echo 'push "dhcp-option DNS 94.140.15.15"' >> /etc/openvpn/server/server.conf
					;;
				esac
				
				echo "keepalive 10 120
cipher AES-256-CBC
user nobody
group $GROUPNAME
persist-key
persist-tun
verb 3
crl-verify crl.pem
client-to-client
client-cert-not-required
username-as-common-name
plugin /usr/lib/openvpn/openvpn-plugin-auth-pam.so login
duplicate-cn" >> /etc/openvpn/server/server.conf
				
				# Enable IP forwarding
				echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/99-openvpn.conf
				sysctl -p /etc/sysctl.d/99-openvpn.conf
				
				# Configure firewall
				# Get network interface
				NIC=$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)
				
				# Add iptables rules
				iptables -t nat -I POSTROUTING 1 -s 10.8.0.0/24 -o $NIC -j MASQUERADE
				iptables -I INPUT 1 -i tun0 -j ACCEPT
				iptables -I FORWARD 1 -i $NIC -o tun0 -j ACCEPT
				iptables -I FORWARD 1 -i tun0 -o $NIC -j ACCEPT
				iptables -I INPUT 1 -i $NIC -p $PROTOCOL --dport $porta -j ACCEPT
				
				# Save iptables
				netfilter-persistent save
				systemctl enable netfilter-persistent
			}
			
			echo -e "\033[1;32mINSTALANDO O OPENVPN \033[1;31m(\033[1;33mPODE DEMORAR!\033[1;31m)"
			echo ""
			fun_bar 'fun_dep > /dev/null 2>&1'
			
			fun_ropen() {
				systemctl enable openvpn-server@server
				systemctl start openvpn-server@server
			}
			
			echo ""
			echo -e "\033[1;32mINICIANDO O OPENVPN"
			echo ""
			fun_bar 'fun_ropen'
			
			# Create client config template
			cat > /etc/openvpn/server/client-common.txt <<EOF
client
dev tun
proto $PROTOCOL
remote $IP $porta
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
auth SHA512
cipher AES-256-CBC
ignore-unknown-option block-outside-dns
verb 3
auth-user-pass
EOF
			
			# Generate client config
			newclient "SSHPLUS"
			
			[[ $(systemctl is-active openvpn-server@server) == "active" ]] && echo -e "\n\033[1;32mOPENVPN INSTALADO COM SUCESSO\033[0m" || echo -e "\n\033[1;31mERRO ! A INSTALACAO CORROMPEU\033[0m"
		}
		
		sleep 3
		fun_conexao
	}

	# Placeholder for other functions - keeping structure minimal
	fun_squid() { echo "Function not implemented"; sleep 2; fun_conexao; }
	fun_drop() { echo "Function not implemented"; sleep 2; fun_conexao; }
	fun_socks() { echo "Function not implemented"; sleep 2; fun_conexao; }
	inst_ssl() { echo "Function not implemented"; sleep 2; fun_conexao; }
	fun_openssh() { echo "Function not implemented"; sleep 2; fun_conexao; }
	fun_sslh() { echo "Function not implemented"; sleep 2; fun_conexao; }
	fun_chisel() { echo "Function not implemented"; sleep 2; fun_conexao; }
	slow_setup() { echo "Function not implemented"; sleep 2; fun_conexao; }

	x="ok"
	fun_conexao() {
		while true; do
			[[ ! -e '/home/sshplus' ]] && exit 0
			clear
			echo -e "\E[44;1;37m                MODO DE CONEXAO                 \E[0m\n"
			
			echo -e "\033[1;32mSERVICO: \033[1;33mOPENSSH \033[1;32mPORTA: \033[1;37m$(grep 'Port' /etc/ssh/sshd_config | cut -d' ' -f2 | grep -v 'no' | xargs)"
			
			[[ $(systemctl is-active openvpn-server@server 2>/dev/null) == "active" ]] && {
				echo -e "\033[1;32mSERVICO: \033[1;33mOPENVPN: \033[1;32mPORTA: \033[1;37m$(grep '^port' /etc/openvpn/server/server.conf 2>/dev/null | awk '{print $2}')"
				sts5="\033[1;32m◉ "
			} || {
				sts5="\033[1;31m○ "
			}
			
			echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
			echo ""
			echo -e "\033[1;31m[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;33mOPENSSH"
			echo -e "\033[1;31m[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;33mOPENVPN $sts5"
			echo -e "\033[1;31m[\033[1;36m00\033[1;31m] \033[1;37m• \033[1;33mSAIR \033[1;32m<\033[1;33m<\033[1;31m< \033[0m"
			echo ""
			echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
			echo ""
			tput civis
			echo -ne "\033[1;32mOQUE DESEJA FAZER \033[1;33m?\033[1;31m?\033[1;37m "
			read x
			tput cnorm
			clear
			case $x in
			1|01)
				fun_openssh
				;;
			4|04)
				fun_openvpn
				;;
			0|00)
				echo -e "\033[1;31mSaindo...\033[0m"
				sleep 2
				clear
				exit
				;;
			*)
				echo -e "\033[1;31mOpcao invalida !\033[0m"
				sleep 2
				;;
			esac
		done
	}
	
	fun_conexao
}
