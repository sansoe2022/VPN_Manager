#!/bin/bash
#====================================================
#   Ubuntu 24.04 Compatible VPN Manager Functions
#====================================================
cor1='\033[41;1;37m'
cor2='\033[44;1;37m'
scor='\033[0m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
SCOLOR='\033[0m'

# Check Licence
[[ $(awk -F" " '{print $2}' /usr/lib/licence) == "@KIRITO_SSH" ]] || exit 0

# Progress Bar
fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        ${comando[0]} >/dev/null 2>&1
        ${comando[1]} >/dev/null 2>&1
        touch $HOME/fim
    ) >/dev/null 2>&1 &
    tput civis
    echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
    while true; do
        for ((i = 0; i < 18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;33m]"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}

ss_ports() {
    ss -tuln | awk 'NR>1{split($5,a,":"); print a[length(a)]}' | sort -n | uniq
}

verif_ptrs() {
    porta=$1
    PT=$(ss -tulnp | grep LISTEN)
    for pton in $(echo -e "$PT" | awk '{split($5,a,":"); print a[length(a)]}' | uniq); do
        svcs=$(echo -e "$PT" | grep -w "$pton" | awk '{print $NF}' | uniq)
        [[ "$porta" = "$pton" ]] && {
            echo -e "\n\033[1;31mPORTA \033[1;33m$porta \033[1;31mEM USO PELO \033[1;37m$svcs\033[0m"
            sleep 3
            fun_conexao
        }
    done
}

# SQUID Proxy Installer/Remover for Ubuntu 24.04
inst_sqd() {
    if ss -tulnp | grep 'squid' >/dev/null 2>&1; then
        echo -e "\E[41;1;37m            REMOVER SQUID PROXY              \E[0m"
        echo ""
        echo -ne "\033[1;32mREALMENTE DESEJA REMOVER O SQUID \033[1;31m? \033[1;33m[s/n]:\033[1;37m "
        read resp
        [[ "$resp" = 's' ]] && {
            echo -e "\n\033[1;32mREMOVENDO O SQUID PROXY !\033[0m"
            echo ""
            rem_sqd() {
                [[ -d "/etc/squid" ]] && {
                    apt-get remove squid -y >/dev/null 2>&1
                    apt-get purge squid -y >/dev/null 2>&1
                    rm -rf /etc/squid >/dev/null 2>&1
                }
            }
            fun_bar 'rem_sqd'
            echo -e "\n\033[1;32mSQUID REMOVIDO COM SUCESSO !\033[0m"
            sleep 2
            clear
            fun_conexao
        } || {
            echo -e "\n\033[1;31mRetornando...\033[0m"
            sleep 2
            clear
            fun_conexao
        }
    else
        clear
        echo -e "\E[44;1;37m              INSTALADOR SQUID                \E[0m"
        echo ""
        IP=$(wget -qO- ipv4.icanhazip.com)
        echo -ne "\033[1;32mPARA CONTINUAR CONFIRME SEU IP: \033[1;37m"
        read -e -i $IP ipdovps
        [[ -z "$ipdovps" ]] && {
            echo -e "\n\033[1;31mIP invalido\033[1;32m"
            echo ""
            read -p "Digite seu IP: " IP
        }
        echo -e "\n\033[1;33mQUAIS PORTAS DESEJA ULTILIZAR NO SQUID \033[1;31m?"
        echo -e "\n\033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mDEFINA AS PORTAS EM SEQUENCIA \033[1;33mEX: \033[1;37m80 8080"
        echo ""
        echo -ne "\033[1;32mINFORME AS PORTAS\033[1;37m: "
        read portass
        [[ -z "$portass" ]] && {
            echo -e "\n\033[1;31mPorta invalida!"
            sleep 3
            fun_conexao
        }
        for porta in $(echo -e $portass); do
            verif_ptrs $porta
        done
        echo -e "\n\033[1;32mINSTALANDO SQUID PROXY\033[0m\n"
        fun_bar 'apt update -y' "apt install squid -y"
        if [[ -d "/etc/squid/" ]]; then
            var_sqd="/etc/squid/squid.conf"
            var_pay="/etc/squid/payload.txt"
        else
            echo -e "\n\033[1;33m[\033[1;31mERRO\033[1;33m]\033[1;37m: \033[1;33mO SQUID PROXY CORROMPEU\033[0m"
            sleep 2
            fun_conexao
        fi
        cat <<-EOF >$var_pay
            .whatsapp.net/
            .facebook.net/
            .twitter.com/
            .speedtest.net/
        EOF
        cat <<-EOF >$var_sqd
            acl url1 dstdomain -i 127.0.0.1
            acl url2 dstdomain -i localhost
            acl url3 dstdomain -i $ipdovps
            acl url4 dstdomain -i /SSHPLUS?
            acl payload url_regex -i "$var_pay"
            acl all src 0.0.0.0/0

            http_access allow url1
            http_access allow url2
            http_access allow url3
            http_access allow url4
            http_access allow payload
            http_access deny all

            #Portas
        EOF
        for Pts in $(echo -e $portass); do
            echo -e "http_port $Pts" >>$var_sqd
            [[ -f "/usr/sbin/ufw" ]] && ufw allow $Pts/tcp
        done
        cat <<-EOF >>$var_sqd
            #Nome squid
            visible_hostname SSHPLUS
            via off
            forwarded_for off
            pipeline_prefetch off
        EOF
        sqd_conf() {
            systemctl restart ssh
            systemctl restart squid
        }
        echo -e "\n\033[1;32mCONFIGURANDO SQUID PROXY\033[0m"
        echo ""
        fun_bar 'sqd_conf'
        echo -e "\n\033[1;32mSQUID INSTALADO COM SUCESSO!\033[0m"
        sleep 2.5s
        fun_conexao
    fi
}

# Dropbear VPN
fun_drop() {
    if ss -tulnp | grep 'dropbear' 1>/dev/null 2>/dev/null; then
        clear
        echo -e "\E[44;1;37m              GERENCIAR DROPBEAR               \E[0m"
        dpbr=$(ss -tulnp | grep 'dropbear' | awk '{split($5,a,":"); print a[length(a)]}' | xargs)
        echo -e "\n\033[1;33mPORTAS\033[1;37m: \033[1;32m$dpbr"
        echo ""
        echo -e "\033[1;31m[\033[1;36m1\033[1;31m] • ALTERAR PORTA DROPBEAR"
        echo -e "\033[1;31m[\033[1;36m2\033[1;31m] • REMOVER DROPBEAR"
        echo -e "\033[1;31m[\033[1;36m0\033[1;31m] • VOLTAR"
        echo ""
        echo -ne "\033[1;32mOQUE DESEJA FAZER ?\033[1;37m "
        read resposta
        if [[ "$resposta" = '1' ]]; then
            echo -ne "\033[1;32mQUAL PORTA DESEJA UTILIZAR?\033[1;37m "
            read pt
            verif_ptrs $pt
            sed -i "s/DROPBEAR_PORT=.*/DROPBEAR_PORT=$pt/" /etc/default/dropbear
            fun_bar 'systemctl restart dropbear'
            echo -e "\n\033[1;32mPORTA ALTERADA COM SUCESSO!"
            sleep 2
            fun_conexao
        elif [[ "$resposta" = '2' ]]; then
            fun_bar 'apt-get purge dropbear -y'
            echo -e "\n\033[1;32mDROPBEAR REMOVIDO COM SUCESSO!"
            sleep 2
            fun_conexao
        elif [[ "$resposta" = '0' ]]; then
            fun_conexao
        else
            echo -e "\033[1;31mOpcao invalida...\033[0m"
            sleep 2
            fun_conexao
        fi
    else
        clear
        echo -e "\E[44;1;37m           INSTALADOR DROPBEAR              \E[0m"
        echo -ne "\033[1;32mDESEJA CONTINUAR ? [s/n]:\033[1;37m "
        read resposta
        [[ "$resposta" = 's' ]] && {
            echo -ne "\033[1;32mQUAL PORTA ?\033[1;37m "
            read porta
            verif_ptrs $porta
            fun_bar 'apt-get update -y' 'apt-get install dropbear -y'
            sed -i "s/DROPBEAR_PORT=.*/DROPBEAR_PORT=$porta/" /etc/default/dropbear
            sed -i 's/NO_START=1/NO_START=0/g' /etc/default/dropbear
            fun_bar 'systemctl restart dropbear'
            echo -e "\n\033[1;32mINSTALACAO CONCLUIDA \033[1;33mPORTA: \033[1;37m$porta\033[0m"
            sleep 2
            fun_conexao
        } || {
            echo -e "\033[1;31mRetornando...\033[0m"
            sleep 2
            fun_conexao
        }
    fi
}

# SSL Tunnel (Stunnel)
inst_ssl() {
    if ss -tulnp | grep 'stunnel' >/dev/null 2>&1; then
        echo -e "\E[44;1;37m              GERENCIAR SSL TUNNEL               \E[0m"
        sslt=$(ss -tulnp | grep stunnel | awk '{split($5,a,":"); print a[length(a)]}' | xargs)
        echo -e "\n\033[1;33mPORTAS\033[1;37m: \033[1;32m$sslt"
        echo ""
        echo -e "\033[1;31m[\033[1;36m1\033[1;31m] • ALTERAR PORTA SSL TUNNEL"
        echo -e "\033[1;31m[\033[1;36m2\033[1;31m] • REMOVER SSL TUNNEL"
        echo -e "\033[1;31m[\033[1;36m0\033[1;31m] • VOLTAR"
        echo ""
        echo -ne "\033[1;32mOQUE DESEJA FAZER ?\033[1;37m "
        read resposta
        if [[ "$resposta" = '1' ]]; then
            echo -ne "\033[1;32mQUAL PORTA DESEJA UTILIZAR?\033[1;37m "
            read porta
            sed -i "s/accept =.*/accept = ${porta}/" /etc/stunnel/stunnel.conf
            fun_bar 'systemctl restart stunnel4'
            echo -e "\n\033[1;32mPORTA ALTERADA COM SUCESSO!"
            sleep 2
            fun_conexao
        elif [[ "$resposta" = '2' ]]; then
            fun_bar 'apt-get purge stunnel4 -y'
            echo -e "\n\033[1;32mSSL TUNNEL REMOVIDO COM SUCESSO!"
            sleep 2
            fun_conexao
        elif [[ "$resposta" = '0' ]]; then
            fun_conexao
        else
            echo -e "\033[1;31mOpcao invalida...\033[0m"
            sleep 2
            fun_conexao
        fi
    else
        clear
        echo -e "\E[44;1;37m              INSTALAR SSL TUNNEL               \E[0m"
        echo -ne "\033[1;32mDESEJA CONTINUAR ? [s/n]:\033[1;37m "
        read resposta
        [[ "$resposta" = 's' ]] && {
            echo -ne "\033[1;32mQUAL PORTA DESEJA UTILIZAR? \033[1;37m"
            read porta
            verif_ptrs $porta
            fun_bar 'apt update -y' 'apt install stunnel4 -y'
            echo -e "cert = /etc/stunnel/stunnel.pem\nclient = no\nsocket = a:SO_REUSEADDR=1\nsocket = l:TCP_NODELAY=1\nsocket = r:TCP_NODELAY=1\n\n[stunnel]\nconnect = 127.0.0.1:22\naccept = ${porta}" >/etc/stunnel/stunnel.conf
            openssl req -new -x509 -days 3650 -nodes -out /etc/stunnel/stunnel.pem -keyout /etc/stunnel/stunnel.pem -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=localhost"
            sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
            fun_bar 'systemctl restart stunnel4'
            echo -e "\n\033[1;32mSSL TUNNEL INSTALADO COM SUCESSO!"
            sleep 2
            fun_conexao
        } || {
            echo -e "\033[1;31mRetornando...\033[0m"
            sleep 2
            fun_conexao
        }
    fi
}

# SSLH Multiplex
fun_sslh() {
    if ss -tulnp | grep 'sslh' >/dev/null 2>&1; then
        echo -e "\E[41;1;37m             REMOVER O SSLH               \E[0m\n"
        echo -ne "\033[1;32mREALMENTE DESEJA REMOVER O SSLH ? [s/n]:\033[1;37m "
        read respo
        [[ "$respo" = "s" ]] && {
            fun_bar 'systemctl stop sslh' 'apt-get purge sslh -y'
            echo -e "\n\033[1;32mREMOVIDO COM SUCESSO !\033[0m\n"
            sleep 2
            fun_conexao
        } || {
            echo -e "\n\033[1;31mRetornando.."
            sleep 2
            fun_conexao
        }
    else
        clear
        echo -e "\E[44;1;37m             INSTALADOR SSLH               \E[0m\n"
        echo -ne "\033[1;32mREALMENTE DESEJA INSTALAR O SSLH ? [s/n]:\033[1;37m "
        read resp
        [[ "$resp" = 's' ]] && {
            fun_bar 'apt-get install sslh -y'
            echo -e "\n\033[1;32mINSTALANDO O SSLH !\033[0m\n"
            echo -e "RUN=yes\nDAEMON_OPTS=\"--user sslh --listen 0.0.0.0:443 --ssh 127.0.0.1:22 --ssl 127.0.0.1:443 --http 127.0.0.1:80 --openvpn 127.0.0.1:1194\"" >/etc/default/sslh
            fun_bar 'systemctl restart sslh'
            echo -e "\n\033[1;32mINSTALADO COM SUCESSO !\033[0m"
            sleep 3
            fun_conexao
        } || {
            echo -e "\n\033[1;31mRetornando.."
            sleep 2
            fun_conexao
        }
    fi
}

# OpenVPN installer/remover
fun_openvpn() {
    if ss -tulnp | grep 'openvpn' >/dev/null 2>&1; then
        echo -e "\E[44;1;37m          GERENCIAR OPENVPN           \E[0m"
        opnp=$(cat /etc/openvpn/server.conf | grep "port" | awk '{print $2}')
        echo -e "\n\033[1;33mPORTA\033[1;37m: \033[1;32m$opnp"
        echo ""
        echo -e "\033[1;31m[\033[1;36m1\033[1;31m] • ALTERAR PORTA"
        echo -e "\033[1;31m[\033[1;36m2\033[1;31m] • REMOVER OPENVPN"
        echo -e "\033[1;31m[\033[1;36m0\033[1;31m] • VOLTAR"
        echo ""
        echo -ne "\033[1;32mOQUE DESEJA FAZER ?\033[1;37m "
        read option
        if [[ "$option" = "1" ]]; then
            echo -ne "\033[1;32mQUAL PORTA DESEJA UTILIZAR?\033[1;37m "
            read porta
            sed -i "s/^port .*/port $porta/" /etc/openvpn/server.conf
            fun_bar 'systemctl restart openvpn'
            echo -e "\n\033[1;32mPORTA ALTERADA COM SUCESSO!"
            sleep 2
            fun_conexao
        elif [[ "$option" = "2" ]]; then
            fun_bar 'apt-get purge openvpn -y'
            echo -e "\n\033[1;32mOPENVPN REMOVIDO COM SUCESSO!"
            sleep 2
            fun_conexao
        elif [[ "$option" = "0" ]]; then
            fun_conexao
        else
            echo -e "\033[1;31mOpcao invalida!\033[0m"
            sleep 2
            fun_conexao
        fi
    else
        clear
        echo -e "\E[44;1;37m              INSTALADOR OPENVPN               \E[0m"
        echo -ne "\033[1;32mDESEJA CONTINUAR ? [s/n]:\033[1;37m "
        read resposta
        [[ "$resposta" = 's' ]] && {
            echo -ne "\033[1;32mQUAL PORTA DESEJA UTILIZAR?\033[1;37m "
            read porta
            fun_bar 'apt update -y' 'apt install openvpn -y'
            echo "port $porta
proto tcp
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
server 10.8.0.0 255.255.255.0
persist-key
persist-tun
status openvpn-status.log
verb 3" >/etc/openvpn/server.conf
            systemctl enable openvpn
            fun_bar 'systemctl restart openvpn'
            echo -e "\n\033[1;32mOPENVPN INSTALADO COM SUCESSO!"
            sleep 2
            fun_conexao
        } || {
            echo -e "\033[1;31mRetornando...\033[0m"
            sleep 2
            fun_conexao
        }
    fi
}

# Socks Proxy (Python3)
fun_socks() {
    clear
    echo -e "\E[44;1;37m            GERENCIAR PROXY SOCKS             \E[0m"
    sks=$(ss -tulnp | grep 'python3' | awk '{split($5,a,":"); print a[length(a)]}' | xargs)
    echo -e "\n\033[1;33mPORTAS\033[1;37m: \033[1;32m$sks"
    echo -e "\033[1;31m[\033[1;36m1\033[1;31m] • INICIAR SOCKS"
    echo -e "\033[1;31m[\033[1;36m2\033[1;31m] • PARAR SOCKS"
    echo -e "\033[1;31m[\033[1;36m0\033[1;31m] • VOLTAR"
    echo ""
    echo -ne "\033[1;32mOQUE DESEJA FAZER ?\033[1;37m "
    read resposta
    if [[ "$resposta" = '1' ]]; then
        echo -ne "\033[1;32mQUAL PORTA DESEJA UTILIZAR?\033[1;37m "
        read porta
        verif_ptrs $porta
        screen -dmS socks python3 /etc/SSHPlus/proxy.py $porta
        echo -e "\033[1;32mSOCKS ATIVADO COM SUCESSO!\033[1;33m"
        sleep 2
        fun_socks
    elif [[ "$resposta" = '2' ]]; then
        for pidproxy in $(screen -ls | grep ".socks" | awk {'print $1'}); do
            screen -r -S "$pidproxy" -X quit
        done
        echo -e "\033[1;32mSOCKS DESATIVADO COM SUCESSO!\033[1;33m"
        sleep 2
        fun_socks
    elif [[ "$resposta" = '0' ]]; then
        fun_conexao
    else
        echo -e "\033[1;31mOpcao invalida!\033[0m"
        sleep 2
        fun_socks
    fi
}

# Chisel (Docker)
fun_chisel() {
    clear
    echo -e "\E[44;1;37m            GERENCIAR CHISEL             \E[0m"
    chisel_port=$(ss -tulnp | grep 'docker' | awk '{split($5,a,":"); print a[length(a)]}' | xargs)
    echo -e "\n\033[1;33mPORTAS\033[1;37m: \033[1;32m$chisel_port"
    echo -e "\033[1;31m[\033[1;36m1\033[1;31m] • INICIAR CHISEL"
    echo -e "\033[1;31m[\033[1;36m2\033[1;31m] • PARAR CHISEL"
    echo -e "\033[1;31m[\033[1;36m0\033[1;31m] • VOLTAR"
    echo ""
    echo -ne "\033[1;32mOQUE DESEJA FAZER ?\033[1;37m "
    read resposta
    if [[ "$resposta" = '1' ]]; then
        echo -ne "\033[1;32mQUAL PORTA DESEJA UTILIZAR?\033[1;37m "
        read porta
        echo -ne "Nome do usuário:\033[1;37m "
        read username
        echo -ne "Senha:\033[1;37m "
        read password
        docker run --name chisel -p $porta:$porta -d --restart always jpillora/chisel server -p $porta --socks5 --key supersecret --auth "$username:$password"
        echo -e "\033[1;32mCHISEL INSTALADO COM SUCESSO!\033[1;33m"
        sleep 2
        fun_chisel
    elif [[ "$resposta" = '2' ]]; then
        docker stop chisel && docker rm chisel
        echo -e "\033[1;32mCHISEL PARADO COM SUCESSO!\033[1;33m"
        sleep 2
        fun_chisel
    elif [[ "$resposta" = '0' ]]; then
        fun_conexao
    else
        echo -e "\033[1;31mOpcao invalida!\033[0m"
        sleep 2
        fun_chisel
    fi
}

# OpenSSH Port Management
fun_openssh() {
    clear
    echo -e "\E[44;1;37m            OPENSSH             \E[0m\n"
    echo -e "\033[1;31m[\033[1;36m1\033[1;31m] • ADICIONAR PORTA"
    echo -e "\033[1;31m[\033[1;36m2\033[1;31m] • REMOVER PORTA"
    echo -e "\033[1;31m[\033[1;36m3\033[1;31m] • VOLTAR"
    echo ""
    echo -ne "\033[1;32mOQUE DESEJA FAZER ?\033[1;37m "
    read resp
    if [[ "$resp" = '1' ]]; then
        echo -ne "\033[1;32mQUAL PORTA DESEJA ADICIONAR?\033[1;37m "
        read pt
        echo "Port $pt" >>/etc/ssh/sshd_config
        systemctl restart ssh
        echo -e "\n\033[1;32mPORTA ADICIONADA COM SUCESSO"
        sleep 2
        fun_conexao
    elif [[ "$resp" = '2' ]]; then
        echo -ne "\033[1;32mQUAL PORTA DESEJA REMOVER?\033[1;37m "
        read pt
        sed -i "/Port $pt/d" /etc/ssh/sshd_config
        systemctl restart ssh
        echo -e "\n\033[1;32mPORTA REMOVIDA COM SUCESSO"
        sleep 2
        fun_conexao
    elif [[ "$resp" = '3' ]]; then
        fun_conexao
    else
        echo -e "\n\033[1;31mOpcao invalida!"
        sleep 2
        fun_conexao
    fi
}

# Main Menu
fun_conexao() {
    while true; do
        clear
        echo -e "\E[44;1;37m                MODO DE CONEXAO                 \E[0m\n"
        echo -e "\033[1;32mSERVICO: \033[1;33mOPENSSH \033[1;32mPORTA: \033[1;37m$(sshd -T | grep '^port ' | awk '{print $2}' | xargs)"
        [[ "$(ss -tulnp | grep 'squid' | wc -l)" != '0' ]] && echo -e "\033[1;32mSERVICO: \033[1;33mSQUID: \033[1;32mPORTA: \033[1;37m$(ss -tulnp | grep 'squid' | awk '{split($5,a,":"); print a[length(a)]}' | xargs)"
        [[ "$(ss -tulnp | grep 'dropbear' | wc -l)" != '0' ]] && echo -e "\033[1;32mSERVICO: \033[1;33mDROPBEAR: \033[1;32mPORTA: \033[1;37m$(ss -tulnp | grep 'dropbear' | awk '{split($5,a,":"); print a[length(a)]}' | xargs)"
        [[ "$(ss -tulnp | grep 'openvpn' | wc -l)" != '0' ]] && echo -e "\033[1;32mSERVICO: \033[1;33mOPENVPN: \033[1;32mPORTA: \033[1;37m$(ss -tulnp | grep 'openvpn' | awk '{split($5,a,":"); print a[length(a)]}' | xargs)"
        [[ "$(ss -tulnp | grep 'python3' | wc -l)" != '0' ]] && echo -e "\033[1;32mSERVICO: \033[1;33mSOCKS: \033[1;32mPORTA: \033[1;37m$(ss -tulnp | grep 'python3' | awk '{split($5,a,":"); print a[length(a)]}' | xargs)"
        [[ "$(ss -tulnp | grep 'stunnel' | wc -l)" != '0' ]] && echo -e "\033[1;32mSERVICO: \033[1;33mSSL TUNNEL: \033[1;32mPORTA: \033[1;37m$(ss -tulnp | grep 'stunnel' | awk '{split($5,a,":"); print a[length(a)]}' | xargs)"
        [[ "$(ss -tulnp | grep 'sslh' | wc -l)" != '0' ]] && echo -e "\033[1;32mSERVICO: \033[1;33mSSLH: \033[1;32mPORTA: \033[1;37m$(ss -tulnp | grep 'sslh' | awk '{split($5,a,":"); print a[length(a)]}' | xargs)"
        [[ "$(ss -tulnp | grep 'docker' | wc -l)" != '0' ]] && echo -e "\033[1;32mSERVICO: \033[1;33mCHISEL: \033[1;32mPORTA: \033[1;37m$(ss -tulnp | grep 'docker' | awk '{split($5,a,":"); print a[length(a)]}' | xargs)"
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo ""
        echo -e "\033[1;31m[\033[1;36m01\033[1;31m] • OPENSSH"
        echo -e "\033[1;31m[\033[1;36m02\033[1;31m] • SQUID PROXY"
        echo -e "\033[1;31m[\033[1;36m03\033[1;31m] • DROPBEAR"
        echo -e "\033[1;31m[\033[1;36m04\033[1;31m] • OPENVPN"
        echo -e "\033[1;31m[\033[1;36m05\033[1;31m] • SOCKS PROXY"
        echo -e "\033[1;31m[\033[1;36m06\033[1;31m] • SSL TUNNEL"
        echo -e "\033[1;31m[\033[1;36m07\033[1;31m] • SSLH MULTIPLEX"
        echo -e "\033[1;31m[\033[1;36m08\033[1;31m] • CHISEL"
        echo -e "\033[1;31m[\033[1;36m00\033[1;31m] • SAIR"
        echo ""
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo ""
        tput civis
        echo -ne "\033[1;32mOQUE DESEJA FAZER ?\033[1;37m "
        read x
        tput cnorm
        clear
        case $x in
            1 | 01) fun_openssh ;;
            2 | 02) inst_sqd ;;
            3 | 03) fun_drop ;;
            4 | 04) fun_openvpn ;;
            5 | 05) fun_socks ;;
            6 | 06) inst_ssl ;;
            7 | 07) fun_sslh ;;
            8 | 08) fun_chisel ;;
            0 | 00)
                echo -e "\033[1;31mSaindo...\033[0m"
                sleep 2
                clear
                exit
                ;;
            *)
                echo -e "\033[1;31mOpcao invalida !\033[0m"
                sleep 2
                ;;
        esac
    done
}

fun_conexao
