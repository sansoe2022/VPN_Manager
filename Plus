#!/bin/bash
clear

# --- Configuration ---
# You might want to update these URLs if they change or if you host your own versions.
# IMPORTANT: Replace these with YOUR OWN TRUSTED SOURCES if possible.
GITHUB_BASE_URL_MAIN="https://raw.githubusercontent.com/sansoe2022/VPN_Manager/refs/heads/main"
GITHUB_BASE_URL_KIRITO="https://raw.githubusercontent.com/kiritosshxd/SSHPLUS/main"
DROPBOX_BASE_URL="https://www.dropbox.com/s"

FILE_LIST_X86="${GITHUB_BASE_URL_MAIN}/Install/list"
FILE_VERSAO="${GITHUB_BASE_URL_MAIN}/Install/versao"
FILE_V2RAY_X86="${GITHUB_BASE_URL_MAIN}/Modulos/v2raymanager"
FILE_BOTTESHELL_X86="${DROPBOX_BASE_URL}/m9tnme1jjbnehnj/botteste.sh"
FILE_SHELLBOT_X86="${GITHUB_BASE_URL_MAIN}/Sistema/ShellBot.sh"

FILE_LIST_ARM="${DROPBOX_BASE_URL}/cs5poyigwm97dyd/listARM"
FILE_V2RAY_ARM="${GITHUB_BASE_URL_KIRITO}/Modulos/v2raymanager" # Different source for ARM v2ray
FILE_SHELLBOT_ARM="${DROPBOX_BASE_URL}/7dkgxy00x33c4y7/ShellBot.sh" # Different source for ARM ShellBot

# Define directory for downloaded management scripts
MANAGER_DIR="/usr/local/bin/sshplus-manager" # Using a more standard location

# --- Basic Checks ---
if [[ "$(whoami)" != "root" ]]; then
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mVocê precisa executar como root\033[0m"
    exit 1
fi

# Ensure MANAGER_DIR exists
mkdir -p "$MANAGER_DIR"

# --- Obfuscated Strings (Decoded for clarity) ---
# It's good practice to understand what these are.
# Original: 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r' | sed -e 's/[^a-z.]//ig' | rev -> server.plus
_lnk="server.plus"
# Original: '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×' | sed -e 's/[^a-z/]//ig' -> /usr/local/lib/
_Ink="/usr/local/lib/" # Changed to a more standard lib directory if this is for libraries
# Original: '/3×u3#s×87r/83×l2×4×i0b×' | sed -e 's/[^a-z/]//ig' -> /usr/lib/
_1nk="/usr/lib/"

# Ensure the target directory for "list" files exists
mkdir -p "$_Ink"

# --- Functions ---

fun_bar() {
    local command_to_run="$1"
    local message="$2"
    echo -ne "  \033[1;33m${message} \033[1;37m- \033[1;33m["
    (
        eval "$command_to_run" >/dev/null 2>&1
        echo $? >/tmp/fun_bar_exit_code
    ) &
    local pid=$!
    local spin='-\|/'
    local i=0
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) % 4 ))
        echo -ne "\b${spin:$i:1}"
        sleep 0.2
    done
    local exit_code=$(</tmp/fun_bar_exit_code)
    rm -f /tmp/fun_bar_exit_code
    wait $pid # Ensure the background process truly finished
    echo -e "\b\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    if [[ "$exit_code" -ne 0 ]]; then
        echo -e "\033[1;31mErro durante a execução do comando: '$command_to_run'\033[0m"
        exit 1
    fi
}

download_manager_file() {
    local url="$1"
    local dest_path="$2"
    echo -ne "  \033[1;33mBaixando ${dest_path##*/} \033[1;37m- \033[1;33m["
    if ! wget -q --show-progress -O "$dest_path" "$url"; then
        echo -e "\b\033[1;31m]\033[1;37m -\033[1;31m FALHA!\033[0m"
        echo -e "\033[1;31mErro ao baixar arquivo de: $url\033[0m"
        exit 1
    fi
    echo -e "\b\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
}

function verif_key() {
    local list_file="${_Ink}/list"
    chmod +x "$list_file" >/dev/null 2>&1
    if [[ ! -e "$list_file" ]]; then
        echo -e "\n\033[1;31mKEY INVÁLIDA ou arquivo 'list' ausente!\033[0m"
        exit 1
    fi
}

function verif_key2() {
    local list_file="${_Ink}/listARM"
    chmod +x "$list_file" >/dev/null 2>&1
    if [[ ! -e "$list_file" ]]; then
        echo -e "\n\033[1;31mKEY INVÁLIDA ou arquivo 'listARM' ausente!\033[0m"
        exit 1
    fi
}

install_python_essentials() {
    # Ubuntu 24.04 comes with Python 3.12 (or newer).
    # Avoid installing older Python 3.x versions unless absolutely necessary and from trusted sources (PPAs).
    # Python 2 is end-of-life and not supported on modern Ubuntu.
    apt-get update -y
    apt-get install -y python3 python3-pip socat
    
    # Try to ensure 'python' symlink points to 'python3' if it exists
    if ! command -v python &>/dev/null || [[ "$(readlink -f /usr/bin/python)" != "$(readlink -f /usr/bin/python3)" ]]; then
        echo "Configurando 'python' para apontar para 'python3'..."
        update-alternatives --install /usr/bin/python python /usr/bin/python3 100 --force
    fi
    # Ensure pip points to python3-pip
    if ! command -v pip &>/dev/null || [[ "$(readlink -f /usr/bin/pip)" != "$(readlink -f /usr/bin/pip3)" ]]; then
         echo "Configurando 'pip' para apontar para 'pip3'..."
         update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 100 --force
    fi
}

install_core_packages() {
    local packages=(
        "bc" "screen" "nano" "unzip" "lsof" "net-tools" # netstat is part of net-tools
        "dos2unix" "nload" "jq" "curl" "figlet" "at"
        "ufw" # Ensure ufw is installed for firewall rules
    )
    # Check for dpkg lock and wait if necessary
    while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
        echo -e "\033[1;33mAguardando outro processo apt/dpkg finalizar...\033[0m"
        sleep 5
    done
    apt-get update -y
    for pkg in "${packages[@]}"; do
        apt-get install -y "$pkg"
    done
    # Use python3 -m pip for clarity and compatibility
    python3 -m pip install speedtest-cli
}


# --- Script Start ---
echo -e "\033[1;31m════════════════════════════════════════════════════\033[0m"
tput setaf 7
tput setab 4
tput bold
printf '%40s%s%-12s\n' "BEM VINDO AO SSHPLUS MANAGER"
tput sgr0
echo -e "\033[1;31m════════════════════════════════════════════════════\033[0m"
echo ""
echo -e "             \033[1;31mATENCAO! \033[1;33mESSE SCRIPT IRA !\033[0m"
echo ""
echo -e "\033[1;31m• \033[1;33mINSTALAR UM CONJUNTO DE SCRIPTS COMO FERRAMENTAS\033[0m"
echo -e "\033[1;33m  PARA O GERENCIAMENTO DE REDE, SISTEMA E USUARIOS\033[0m"
echo ""
echo -e "\033[1;32m• \033[1;32mDICA! \033[1;33mUTILIZE O TEMA DARK EM SEU TERMINAL PARA\033[0m"
echo -e "\033[1;33m  UMA MELHOR EXPERIÊNCIA E VISUALIZACAO DO MESMO!\033[0m"
echo ""
echo -e "\033[1;31m≠×≠×≠×≠×≠×≠×≠×[\033[1;33m • \033[1;32mEDIT:@kiritosshxd\033[1;33m •\033[1;31m ]≠×≠×≠×≠×≠×≠×≠×\033[0m"
echo ""
echo -e "\033[1;31mAVISO DE SEGURANÇA: \033[1;33mEste script baixa e executa arquivos de fontes externas.\033[0m"
echo -e "\033[1;33mCertifique-se de confiar nessas fontes antes de continuar.\033[0m"
echo ""

read -p "$(echo -e '\033[1;36mDeseja continuar com a instalação (s/N)? \033[1;37m')" -n 1 -r
echo
if [[ ! $REPLY =~ ^[Ss]$ ]]; then
    echo -e "\033[1;31mInstalação cancelada.\033[0m"
    exit 0
fi

echo -ne "\033[1;36mGERAR AS KEY FREE [N/S]: \033[1;37m"
read x
[[ $x = @(n|N) ]] && exit

echo -e "\033[1;36mSelecione a Arquitetura da sua VPS: \033[1;37m"
echo -e "[1] - x86_64"
echo -e "[2] - aarch64(ARM)"
echo -ne "\033[1;36mOpção: \033[1;37m"
read resposta

# Common setup regardless of architecture
echo -e "\n\033[1;36mConfigurando SSH... \033[0m"
sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config >/dev/null 2>&1
systemctl restart ssh.service || service ssh restart >/dev/null 2>&1
mkdir -p /etc/rec >/dev/null 2>&1 # Ensure /etc/rec exists

if [[ "$resposta" = '1' ]]; then
    echo -e "\n\033[1;36mArquitetura selecionada: x86_64\033[0m"
    
    echo -e "\033[1;36mVERIFICANDO E BAIXANDO ARQUIVOS ESSENCIAIS (x86_64)... \033[0m"
    download_manager_file "$FILE_LIST_X86" "${_Ink}/list"
    verif_key # Check 'list' file
    
    download_manager_file "$FILE_VERSAO" "$MANAGER_DIR/versao"
    download_manager_file "$FILE_V2RAY_X86" "$MANAGER_DIR/v2raymanager"
    download_manager_file "$FILE_BOTTESHELL_X86" "$MANAGER_DIR/botteste.sh"
    download_manager_file "$FILE_SHELLBOT_X86" "$HOME/BOT/ShellBot.sh" # Original script puts this in HOME/BOT

    chmod +x "${MANAGER_DIR}/v2raymanager" "${MANAGER_DIR}/botteste.sh" "${HOME}/BOT/ShellBot.sh"
    echo "/bin/menu" >/bin/h && chmod +x /bin/h >/dev/null 2>&1 # Original script creates this symlink/wrapper

elif [[ "$resposta" = '2' ]]; then
    echo -e "\n\033[1;36mArquitetura selecionada: aarch64(ARM)\033[0m"

    echo -e "\033[1;36mVERIFICANDO E BAIXANDO ARQUIVOS ESSENCIAIS (aarch64)... \033[0m"
    download_manager_file "$FILE_LIST_ARM" "${_Ink}/listARM"
    verif_key2 # Check 'listARM' file

    download_manager_file "$FILE_VERSAO" "$MANAGER_DIR/versao"
    download_manager_file "$FILE_V2RAY_ARM" "$MANAGER_DIR/v2raymanager"
    download_manager_file "$FILE_BOTTESHELL_X86" "$MANAGER_DIR/botteste.sh" # Assuming botteste.sh is universal or x86 version works on ARM
    download_manager_file "$FILE_SHELLBOT_ARM" "$HOME/BOT/ShellBot.sh" # Original script puts this in HOME/BOT

    chmod +x "${MANAGER_DIR}/v2raymanager" "${MANAGER_DIR}/botteste.sh" "${HOME}/BOT/ShellBot.sh"
    echo "/bin/menu" >/bin/h && chmod +x /bin/h >/dev/null 2>&1 # Original script creates this symlink/wrapper

else
    echo ""
    echo -e "\033[1;31mOpção inválida! Por favor, selecione 1 ou 2.\033[0m"
    exit 1
fi

echo -e "\n\033[1;32mKEY VALIDADA!\033[0m"
sleep 1s

# --- Database Management ---
if [[ -f "$HOME/usuarios.db" ]]; then
    clear
    echo -e "\n\033[0;34m═════════════════════════════════════════════════\033[0m"
    echo ""
    echo -e "                 \033[1;33m• \033[1;31mATENÇÃO \033[1;33m• \033[0m"
    echo ""
    echo -e "\033[1;33mUma base de Dados de Usuários \033[1;32m(usuarios.db) \033[1;33mFoi"
    echo -e "Encontrada! Deseja mantê-la preservando o limite"
    echo -e "de Conexões simultâneas dos usuários ? Ou Deseja"
    echo -e "criar uma nova base de dados ?\033[0m"
    echo -e "\n\033[1;37m[\033[1;31m1\033[1;37m] \033[1;33mManter Base de Dados Atual\033[0m"
    echo -e "\033[1;37m[\033[1;31m2\033[1;37m] \033[1;33mCriar uma Nova Base de Dados\033[0m"
    echo -e "\n\033[0;34m═════════════════════════════════════════════════\033[0m"
    echo ""
    tput setaf 2
    tput bold
    read -p "Opção ?: " -e -i 1 optiondb
    tput sgr0
else
    # Default to creating a new one if none found
    optiondb='2'
fi

if [[ "$optiondb" = '2' ]]; then
    echo -e "\033[1;33mCriando nova base de dados de usuários...\03[0m"
    awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' >"$HOME/usuarios.db"
else
    echo -e "\033[1;33mMantendo a base de dados de usuários existente...\03[0m"
fi

clear
tput setaf 7
tput setab 4
tput bold
printf '%35s%s%-18s\n' " AGUARDE A INSTALAÇÃO"
tput sgr0
echo ""
echo ""

# --- System Update ---
echo -e "          \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mATUALIZANDO SISTEMA \033[1;33m[\033[1;31m!\033[1;33m]\033[0m"
echo ""
echo -e "    \033[1;33mATUALIZAÇÕES COSTUMAM DEMORAR UM POUCO!\033[0m"
echo ""
fun_bar 'apt-get update -y' 'Atualizando lista de pacotes'
mkdir -p /usr/share/.plus
echo "crz: $(date)" >/usr/share/.plus/.plus

clear
echo ""
echo -e "          \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mINSTALANDO PACOTES ESSENCIAIS \033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "\033[1;33mALGUNS PACOTES SÃO EXTREMAMENTE NECESSÁRIOS !\033[0m"
echo ""
fun_bar 'install_core_packages' 'Instalando pacotes base'

# --- Firewall Configuration ---
echo -e "\n\033[1;36mConfigurando UFW (Firewall)... \033[0m"
if command -v ufw &>/dev/null; then
    ufw allow 22/tcp # Assuming SSH is on port 22 after modification
    ufw allow 80/tcp
    ufw allow 443/tcp
    ufw allow 3128/tcp
    ufw allow 8799/tcp
    ufw allow 8080/tcp
    ufw --force enable
    echo -e "\033[1;32mUFW configurado e ativado.\033[0m"
else
    echo -e "\033[1;33mUFW não encontrado ou não foi possível configurar. Verifique manualmente.\033[0m"
fi

clear
echo ""
echo -e "              \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mFINALIZANDO \033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "      \033[1;33mOTIMIZANDO PYTHON E PACOTES \033[0m"
echo ""
fun_bar 'install_python_essentials' 'Instalando Python e pip'

clear
echo ""
echo -e "              \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mFINALIZANDO \033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "      \033[1;33mCONCLUINDO FUNÇÕES E DEFINIÇÕES! \033[0m"
echo ""
# The original script had `fun_bar "$_Ink/list $_lnk $_Ink $_1nk $key"` here.
# This implies the 'list' file itself is an executable that performs final setup using these variables.
# This is a critical unknown. I'm calling it as an executable with parameters as per original.
# YOU MUST ENSURE ${_Ink}/list (or listARM) IS INTENDED TO BE RUN THIS WAY.
if [[ "$resposta" = '1' ]]; then
    fun_bar "${_Ink}/list ${_lnk} ${_Ink} ${_1nk} ${key:-}" "Executando script final 'list'"
elif [[ "$resposta" = '2' ]]; then
    fun_bar "${_Ink}/listARM ${_lnk} ${_Ink} ${_1nk} ${key:-}" "Executando script final 'listARM'"
fi

clear
echo ""
echo -e "        \033[1;33m • \033[1;32mINSTALAÇÃO CONCLUIDA\033[1;33m • \033[0m"
echo ""
echo -e "\033[1;31m \033[1;33mCOMANDO PRINCIPAL: \033[1;32mmenu\033[0m"
echo -e "\033[1;33m MAIS INFORMACOES \033[1;31m(\033[1;36mTELEGRAM\033[1;31m): \033[1;37m@SSHPLUS\033[0m"
echo ""

# Cleanup - Removed `rm $HOME/Plus` as it was never created in this revised script
# and `cat /dev/null >~/.bash_history && history -c` is also removed for better auditability
# unless the user explicitly wants to clear history.
echo -e "\033[1;33mReiniciando o sistema em 5 segundos para aplicar as mudanças...\033[0m"
sleep 5
# reboot # Uncomment to actually reboot
